what is the input to the program
what is the output of the program
what is the input to each recursive calls
what is the output of each recursive calls

#1 Counting Sheep
------------------------------------------------------------------
Write a recursive function that counts how many sheep jumps over the fence. Your program should take a number as an input. That number should be the number of sheep you have. The function should display the number along with the message "Another sheep jump over the fence" until no more sheep are left.

Input: 3
Output:
3 - Another sheep jump over the fence
2 - Another sheep jump over the fence
1 - Another sheep jump over the fence
------------------------------------------------------------------

#2 Array Double
------------------------------------------------------------------
Write a function that takes an array as input which contains an unknown set of numbers, and outputs an array with each input value doubled. Test your solution by trying a handful of different arrays. For example,

Input: [1, 2, 3]
Output: [2, 4, 6]
------------------------------------------------------------------

#3 Reverse String
------------------------------------------------------------------
Write a function that reverses a string. Take a string as input, reverse the string, and return the new string.

input: "hello world"
output: "dlrow olleh"
recurs input: hello worl
recurs out: d
------------------------------------------------------------------

#4 nth Triangular Number
------------------------------------------------------------------
Calculates the nth triangular number. A triangular number counts the objects that can form an equilateral triangle. The nth triangular number is the number of dots composing a triangle with n dots on a side, and is equal to the sum of the n natural numbers from 1 to n. This is the Triangular Number Sequence: 1, 3, 6, 10, 15, 21, 28, 36, 45


input: "5"
output: "15"
recurs input: 
recurs out: 


n1 = 1 *
n2 = 2 **
n3 = 3 ***
n4 = 4 ****
n5 = 5 *****
n1; n1 + n2; n1 + n2 + n3; n1+ n2 + n3 + n4;  etc. 
1 (1); 1+2 (3); 1+2+3 (6); 1+2+3+4 (10) ; 1+2+3+4+5 (15)

    * (1) in 4 spaces
   * * (2) in 3 spaces
  * * * (3) in 2 spaces
 * * * * (4) in 1 spaces
* * * * * (5) in 0 spaces

number of spaces 5 4 3 2 1 - (values)
number of stars  1 2 3 4 + (starts)
driving number 5 4 3 2 1 - once reach 0 then base case (values)

this solution below resulted in an inverted triangle; see html file for corrected version ------
<script>
function makeTriangle(value, spacing) {
  if(value === 0) {
    return '\n';
  }

  return '\n' + ' '.repeat(spacing) + '* '.repeat(value) + makeTriangle(value - 1, spacing + 1)

}


console.log(makeTriangle(5, 0));

</script>

------------------------------------------------------------------

#5 String Splitter
------------------------------------------------------------------
Split a string based upon a separator (similar to String.prototype.split).
"I" "love memes"
splitArr["I love memes",]

if str[0] === separator{

}

func(str, separator)

I:"I love memes", separator
O: ["I", "love", "memes"]
RI:
RO:

func("sjdfldsjff", " ")
------------------------------------------------------------------

#6 Binary Representation
------------------------------------------------------------------
Write a recursive function that prints out the binary representation of a given number. For example, the program should take 3 as an input and print 11 as output, or 25 as an input and print 11001 as an output. Note that the binary representation of 0 should be 0.

Binary = 16 / 8 / 4 / 2 / 1

if number is 25 ===> 
16+8+1 = 25 11001
16(1) 8(1) 4(0) 2(0) 1(1)

	25/2 = 12 
	25%2 = 1  (retain number)
	
	12/2 = 6
	12%2 = 0  (retain number)
	
	 6/2 = 3
	6 % 2 = 0  (retain number)
	
	3/2 = 1
	3%2 = 1 (retain number)
	
	1/2 = 0 (base case stop when at 0)
	1%2 = 1 (recursive number retained)


if number is 3 ===>
2 + 1 = 3 00011
16(0) 8(0) 4(0) 2(1) 1(1)

  3/2 = 1 
  3%2 = 1  (retain number)
    
  1/2 = 0 (base case stop when at 0)
  1%2 = 1  (retain number)


if number is 11 ===>
8 + 2 + 1 = 11 01011
16(0) 8(1) 4(0) 2(1) 1(1)

  11/2 = 5 
  11%2 = 1  (retain number)
    
  5/2 = 2 (base case stop when at 0)
  5%2 = 1  (retain number)  

  2/2 = 1 (base case stop when at 0)
  2%2 = 0  (retain number)  

  1/2 = 0 (base case stop when at 0)
  1%2 = 1  (retain number)  

pseudo
  function giveBinary(number){
    if((number/2) === 0){
      return (number % 2);
    }
    let quotient = (number/2)
    let remainder = (number%2)
    return remainder + giveBinary(quotient)

  }

#7 Anagrams
------------------------------------------------------------------
An anagram is any word or phrase that exactly reproduces the letters in another order. Write a function that creates an anagram (listing all the rearrangements of a word) of a given word. For example, if the user types east, the program should list all 24 permutations, including eats, etas, teas, and non-words like tsae.

Hint: For your algorithm, you might want to think about a prefix and use that to create the new words. For example, given east, use e as a prefix and you would place e in front of all six permutations of ast â€” ast, ats, sat, sta, tas, and tsa. This will give you the words east, eats, esat, esta, etas, and etsa. Continue this way until you find all the anagrams for east. There should be 24 of them.

input: east
output: [24 indiv permutations]
Tree

1234
east
eats
esat
esta
etas
etsa

4 * 3 * 2 * 1 = 24

12
to

21
ot

2 * 1 = 2


tie
tei
ite
iet
eti
eit

3 * 2 * 1 = 6

what is base case? when length of array is equal to permutation calculation

write out in extreme detail 

seperate functions
max permutation
remove previously used char from avail pool
conductor function (first entry) ===> recursive


#9 Factorial
------------------------------------------------------------------
Factorial
Write a recursive function that finds the factorial of a given number. The factorial of a number can be found by multiplying that number by each number between itself and one. The factorial of 5 is equal to 5 * 4 * 3 * 2 * 1 = 120
------------------------------------------------------------------

#10 Fibonacci
------------------------------------------------------------------
Write a recursive function that prints the fibonacci sequence of a given number. The fibonnaci sequence a series of numbers in which each number is the sum of the two preceding numbers. For example the 7th fibonacci number in a fibonaci sequence is 13. The sequence looks as follows: 1 1 2 3 5 8 13.

1 1 2 3 5 8 13


first + second = sum
1+1 = 2
prev second (is now first) + prev sum (is now second) = new sum
1+2 = 3
prev second (is now first) + prev sum (is now second) = new sum
2+3 = 5
prev second (is now first) + prev sum (is now second) = new sum
3+5 = 8
prev second (is now first) + prev sum ( is now second) = new sum
5+8 = 13

etc.

what is the 7th fibonacci number ==> print out 13

iterate + 1 until reach (finacci count - 2)
